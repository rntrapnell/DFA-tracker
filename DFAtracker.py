# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16GabouaCzEbpFYZV1g4QInJswFPJMjva
"""

import pandas as pd

full=pd.read_json('http://lookup-service-prod.mlb.com/json/named.transaction_all.bam?sport_code=%27mlb%27&start_date=%2720200815%27&end_date=%2720200901%27').loc['queryResults']

transactions_dict = full[0]['row']

tracker =pd.DataFrame(columns=['Player', 'Team', 'DFA Date' ,'Resolution Date', 'Status', 'New Team'])

for transaction in transactions_dict:
  if transaction['type'] == 'Designated for Assignment':
    tracker = tracker.append({'Player': transaction['player'],
                              'Team' : transaction['team'],
                              'DFA Date': transaction['trans_date'].split('T')[0]}
                             , ignore_index=True, )

for transaction in transactions_dict:
  if transaction['type'] in ['Released', 'Trade', 'Claimed Off Waivers', 'Outrighted', 'Returned'] and transaction['player'] in tracker['Player'].tolist():


    #tracker_entry = tracker[tracker['Player']== transaction['player']]
    tracker.loc[tracker['Player']== transaction['player'],'Status'] = transaction['type']
    #tracker[tracker['Player']== transaction['player']]['Status'] = transaction['type']
    tracker.loc[tracker['Player']== transaction['player'],'Resolution Date'] = transaction['trans_date'].split('T')[0]
    tracker.loc[tracker['Player']== transaction['player'],'New Team'] = transaction['team']
    #print (tracker_entry)
    #tracker = tracker.append(tracker_entry)



from flask import Flask, render_template

'''def create_app(test_config=None):
    # create and configure the app
    app = Flask(__name__, instance_relative_config=True)
    app.config.from_mapping(
        SECRET_KEY='dev',
        DATABASE=os.path.join(app.instance_path, 'flaskr.sqlite'),
    )

    if test_config is None:
        # load the instance config, if it exists, when not testing
        app.config.from_pyfile('config.py', silent=True)
    else:
        # load the test config if passed in
        app.config.from_mapping(test_config)

    # ensure the instance folder exists
    try:
        os.makedirs(app.instance_path)
    except OSError:
        pass'''

app = Flask(__name__, instance_relative_config=True)


@app.route('/')
def analysis():
    return render_template("dfa_tracker.html", table=tracker.to_html(index=False))
#return app
app.run
